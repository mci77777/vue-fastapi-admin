-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.ai_model (
  id integer NOT NULL DEFAULT nextval('ai_model_id_seq'::regclass),
  name text NOT NULL,
  model text NOT NULL,
  base_url text,
  api_key text,
  description text,
  timeout integer DEFAULT 60,
  is_active boolean DEFAULT true,
  is_default boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_model_pkey PRIMARY KEY (id)
);
CREATE TABLE public.ai_prompt (
  id integer NOT NULL DEFAULT nextval('ai_prompt_id_seq'::regclass),
  name text NOT NULL,
  version text NOT NULL,
  system_prompt text NOT NULL,
  tools_json text,
  description text,
  is_active boolean DEFAULT false,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  CONSTRAINT ai_prompt_pkey PRIMARY KEY (id)
);
CREATE TABLE public.anon_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  session_id uuid,
  role text NOT NULL CHECK (role = ANY (ARRAY['user'::text, 'assistant'::text, 'system'::text])),
  content text NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  is_final boolean NOT NULL DEFAULT false,
  metadata jsonb DEFAULT '{}'::jsonb,
  sequence_number integer NOT NULL DEFAULT 0,
  CONSTRAINT anon_messages_pkey PRIMARY KEY (id),
  CONSTRAINT anon_messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT anon_messages_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.anon_sessions(id)
);
CREATE TABLE public.anon_rate_limits (
  ip text NOT NULL,
  day date NOT NULL,
  count integer NOT NULL DEFAULT 0,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT anon_rate_limits_pkey PRIMARY KEY (day, ip)
);
CREATE TABLE public.anon_sessions (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  session_token text NOT NULL UNIQUE,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  last_activity timestamp with time zone NOT NULL DEFAULT now(),
  expires_at timestamp with time zone NOT NULL,
  ip_address text,
  user_agent text,
  is_active boolean NOT NULL DEFAULT true,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT anon_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT anon_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.api_endpoints (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL,
  path character varying NOT NULL,
  method character varying NOT NULL DEFAULT 'POST'::character varying,
  target_url character varying NOT NULL,
  target_method character varying,
  weight integer NOT NULL DEFAULT 100,
  priority integer NOT NULL DEFAULT 0,
  max_qps integer,
  max_concurrent integer,
  timeout_seconds double precision NOT NULL DEFAULT 30.0,
  is_active boolean NOT NULL DEFAULT true,
  is_healthy boolean NOT NULL DEFAULT true,
  description character varying,
  tags character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT api_endpoints_pkey PRIMARY KEY (id)
);
CREATE TABLE public.audit_logs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id character varying,
  username character varying,
  is_anonymous boolean NOT NULL DEFAULT false,
  action character varying NOT NULL,
  resource character varying NOT NULL,
  resource_id character varying,
  endpoint character varying,
  method character varying,
  target_url character varying,
  response_time_ms integer,
  status_code integer,
  details jsonb,
  error_message character varying,
  ip_address character varying,
  user_agent character varying,
  status character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT audit_logs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.calendar_events (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  workout_id text,
  event_type text NOT NULL,
  date bigint NOT NULL,
  title text NOT NULL,
  description text,
  duration_minutes integer,
  color text,
  is_all_day integer NOT NULL DEFAULT 0,
  reminder_minutes_before integer,
  is_completed integer NOT NULL DEFAULT 0,
  completion_date bigint,
  cancelled integer NOT NULL DEFAULT 0,
  recurrence_rule text,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  modified_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  is_synced integer NOT NULL DEFAULT 0,
  CONSTRAINT calendar_events_pkey PRIMARY KEY (id),
  CONSTRAINT calendar_events_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.chat_fts (
  content text NOT NULL,
  rowid integer NOT NULL DEFAULT nextval('chat_fts_rowid_seq'::regclass),
  search_vector tsvector DEFAULT to_tsvector('english'::regconfig, content),
  CONSTRAINT chat_fts_pkey PRIMARY KEY (rowid)
);
CREATE TABLE public.chat_messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id text NOT NULL,
  content text NOT NULL,
  role character varying NOT NULL DEFAULT 'user'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  user_type character varying DEFAULT NULL::character varying,
  CONSTRAINT chat_messages_pkey PRIMARY KEY (id)
);
CREATE TABLE public.chat_raw (
  id integer NOT NULL DEFAULT nextval('chat_raw_id_seq'::regclass),
  session_id text NOT NULL,
  role text NOT NULL,
  content text NOT NULL,
  timestamp bigint NOT NULL DEFAULT unix_timestamp_ms(),
  metadata text NOT NULL DEFAULT '{}'::text,
  message_id text NOT NULL,
  in_reply_to_message_id text,
  thinking_nodes text,
  final_markdown text,
  CONSTRAINT chat_raw_pkey PRIMARY KEY (id),
  CONSTRAINT chat_raw_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.chat_sessions(id)
);
CREATE TABLE public.chat_sessions (
  id text NOT NULL,
  title text NOT NULL,
  user_id uuid NOT NULL,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  last_active_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  is_active integer NOT NULL DEFAULT 0,
  status integer NOT NULL DEFAULT 0,
  message_count integer NOT NULL DEFAULT 0,
  summary text,
  metadata text,
  db_created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  db_updated_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  CONSTRAINT chat_sessions_pkey PRIMARY KEY (id),
  CONSTRAINT chat_sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.chat_vec (
  id integer NOT NULL DEFAULT nextval('chat_vec_id_seq'::regclass),
  embedding bytea NOT NULL,
  embedding_dim integer NOT NULL,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  CONSTRAINT chat_vec_pkey PRIMARY KEY (id)
);
CREATE TABLE public.conversations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  title text,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  is_active boolean DEFAULT true,
  user_type character varying DEFAULT NULL::character varying,
  CONSTRAINT conversations_pkey PRIMARY KEY (id),
  CONSTRAINT conversations_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.gateway_configs (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  key character varying NOT NULL UNIQUE,
  value text NOT NULL,
  value_type character varying NOT NULL DEFAULT 'string'::character varying,
  description character varying,
  category character varying,
  is_active boolean NOT NULL DEFAULT true,
  is_system boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT gateway_configs_pkey PRIMARY KEY (id)
);
CREATE TABLE public.memory_records (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id uuid NOT NULL,
  tier text NOT NULL DEFAULT 'standard'::text,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  expires_at bigint,
  importance integer NOT NULL DEFAULT 5,
  embedding bytea,
  embedding_dim integer NOT NULL DEFAULT 0,
  embedding_status text NOT NULL DEFAULT 'pending'::text,
  payload_json jsonb NOT NULL DEFAULT '{}'::jsonb,
  content_length integer NOT NULL DEFAULT 0,
  model_version text NOT NULL DEFAULT 'v1.0'::text,
  generation_time_ms integer,
  updated_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  CONSTRAINT memory_records_pkey PRIMARY KEY (id),
  CONSTRAINT memory_records_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.message_embedding (
  id integer NOT NULL DEFAULT nextval('message_embedding_id_seq'::regclass),
  message_id integer NOT NULL,
  vector bytea NOT NULL,
  vector_dim integer NOT NULL,
  embedding_status text NOT NULL DEFAULT 'pending'::text,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  model_version text NOT NULL DEFAULT 'v1.0'::text,
  generation_time_ms integer,
  text_length integer NOT NULL,
  CONSTRAINT message_embedding_pkey PRIMARY KEY (id),
  CONSTRAINT message_embedding_message_id_fkey FOREIGN KEY (message_id) REFERENCES public.chat_raw(id)
);
CREATE TABLE public.messages (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  conversation_id uuid NOT NULL,
  user_id uuid NOT NULL,
  content text NOT NULL,
  role character varying NOT NULL DEFAULT 'user'::character varying,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  user_type character varying DEFAULT NULL::character varying,
  CONSTRAINT messages_pkey PRIMARY KEY (id),
  CONSTRAINT messages_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id),
  CONSTRAINT messages_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.public_content (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL,
  content text,
  owner_id uuid,
  is_public boolean NOT NULL DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT public_content_pkey PRIMARY KEY (id),
  CONSTRAINT public_content_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id)
);
CREATE TABLE public.public_shares (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  conversation_id uuid NOT NULL,
  user_id uuid NOT NULL,
  share_token character varying NOT NULL UNIQUE,
  title text,
  description text,
  is_public boolean DEFAULT true,
  expires_at timestamp with time zone,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  user_type character varying DEFAULT NULL::character varying,
  CONSTRAINT public_shares_pkey PRIMARY KEY (id),
  CONSTRAINT public_shares_conversation_id_fkey FOREIGN KEY (conversation_id) REFERENCES public.conversations(id),
  CONSTRAINT public_shares_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(user_id)
);
CREATE TABLE public.search_content (
  id integer NOT NULL DEFAULT nextval('search_content_id_seq'::regclass),
  content text NOT NULL,
  embedding text,
  metadata text NOT NULL DEFAULT '{}'::text,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  CONSTRAINT search_content_pkey PRIMARY KEY (id)
);
CREATE TABLE public.session_summary (
  id integer NOT NULL DEFAULT nextval('session_summary_id_seq'::regclass),
  session_id text NOT NULL,
  range_start integer NOT NULL,
  range_end integer NOT NULL,
  summary_content text NOT NULL,
  summary_type text NOT NULL DEFAULT 'auto'::text,
  created_at bigint NOT NULL DEFAULT unix_timestamp_ms(),
  original_message_count integer NOT NULL,
  original_token_count integer NOT NULL,
  summary_token_count integer NOT NULL,
  compression_ratio real NOT NULL,
  model_used text NOT NULL DEFAULT 'gpt-3.5-turbo'::text,
  generation_time_ms integer,
  quality_score real,
  CONSTRAINT session_summary_pkey PRIMARY KEY (id),
  CONSTRAINT session_summary_session_id_fkey FOREIGN KEY (session_id) REFERENCES public.chat_sessions(id)
);
CREATE TABLE public.system_prompts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name character varying NOT NULL UNIQUE,
  title character varying NOT NULL,
  content text NOT NULL,
  variables character varying,
  priority integer NOT NULL DEFAULT 0,
  is_active boolean NOT NULL DEFAULT true,
  is_default boolean NOT NULL DEFAULT false,
  description character varying,
  category character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT system_prompts_pkey PRIMARY KEY (id)
);
CREATE TABLE public.tokens (
  id integer NOT NULL DEFAULT nextval('tokens_id_seq'::regclass),
  accesstoken text NOT NULL,
  refreshtoken text NOT NULL,
  tokentype text NOT NULL DEFAULT 'Bearer'::text,
  expiresin integer NOT NULL,
  issuedat bigint NOT NULL DEFAULT unix_timestamp_ms(),
  userid uuid NOT NULL,
  scope text,
  CONSTRAINT tokens_pkey PRIMARY KEY (id),
  CONSTRAINT tokens_userid_fkey FOREIGN KEY (userid) REFERENCES public.users(user_id)
);
CREATE TABLE public.user_anon (
  user_id uuid NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  ip text,
  expires_at timestamp with time zone NOT NULL,
  is_active boolean NOT NULL DEFAULT true,
  metadata jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT user_anon_pkey PRIMARY KEY (user_id),
  CONSTRAINT user_anon_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_metrics (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  user_id character varying NOT NULL UNIQUE,
  username character varying,
  email character varying,
  total_requests bigint NOT NULL DEFAULT 0,
  daily_requests integer NOT NULL DEFAULT 0,
  monthly_requests integer NOT NULL DEFAULT 0,
  first_request_at timestamp with time zone NOT NULL DEFAULT now(),
  last_request_at timestamp with time zone NOT NULL DEFAULT now(),
  daily_reset_at timestamp with time zone NOT NULL DEFAULT now(),
  monthly_reset_at timestamp with time zone NOT NULL DEFAULT now(),
  is_blocked boolean NOT NULL DEFAULT false,
  is_anonymous boolean NOT NULL DEFAULT false,
  last_ip character varying,
  last_user_agent character varying,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT user_metrics_pkey PRIMARY KEY (id)
);
CREATE TABLE public.user_profiles (
  userid uuid NOT NULL,
  username text,
  displayname text,
  email text,
  phonenumber text,
  profileimageurl text,
  bio text,
  gender text,
  height real,
  heightunit text,
  weight real,
  weightunit text,
  fitnesslevel integer,
  fitnessgoals text NOT NULL DEFAULT '[]'::text,
  workoutdays text NOT NULL DEFAULT '[]'::text,
  allowpartnermatching integer NOT NULL DEFAULT 0,
  totalworkoutcount integer NOT NULL DEFAULT 0,
  weeklyactiveminutes integer NOT NULL DEFAULT 0,
  likesreceived integer NOT NULL DEFAULT 0,
  isanonymous integer NOT NULL DEFAULT 0,
  hasvalidsubscription integer NOT NULL DEFAULT 0,
  lastupdated bigint NOT NULL DEFAULT unix_timestamp_ms(),
  createdat bigint NOT NULL DEFAULT unix_timestamp_ms(),
  profilesummary text,
  vector bytea,
  vectorcreatedat bigint,
  CONSTRAINT user_profiles_pkey PRIMARY KEY (userid),
  CONSTRAINT user_profiles_userid_fkey FOREIGN KEY (userid) REFERENCES public.users(user_id)
);
CREATE TABLE public.user_settings (
  userid uuid NOT NULL,
  thememode text NOT NULL DEFAULT 'system'::text,
  languagecode text NOT NULL DEFAULT 'zh'::text,
  measurementsystem text NOT NULL DEFAULT 'metric'::text,
  notificationsenabled integer NOT NULL DEFAULT 1,
  soundsenabled integer NOT NULL DEFAULT 1,
  locationsharingenabled integer NOT NULL DEFAULT 0,
  datasharingenabled integer NOT NULL DEFAULT 0,
  allowworkoutsharing integer NOT NULL DEFAULT 0,
  autobackupenabled integer NOT NULL DEFAULT 0,
  backupfrequency integer NOT NULL DEFAULT 7,
  lastbackuptime bigint NOT NULL DEFAULT 0,
  allowpartnermatching integer NOT NULL DEFAULT 0,
  preferredmatchdistance integer NOT NULL DEFAULT 10,
  matchbyfitnesslevel integer NOT NULL DEFAULT 1,
  lastmodified bigint NOT NULL DEFAULT unix_timestamp_ms(),
  CONSTRAINT user_settings_pkey PRIMARY KEY (userid),
  CONSTRAINT user_settings_userid_fkey FOREIGN KEY (userid) REFERENCES public.users(user_id)
);
CREATE TABLE public.users (
  user_id uuid NOT NULL DEFAULT gen_random_uuid(),
  email text,
  username text NOT NULL,
  displayname text,
  photourl text,
  phonenumber text,
  isactive integer NOT NULL DEFAULT 1,
  isemailverified integer NOT NULL DEFAULT 0,
  wechatid text,
  anonymousid text,
  gender text,
  weight real,
  weightunit text,
  fitnesslevel integer,
  preferredgym text,
  avatar text,
  bio text,
  thememode text NOT NULL DEFAULT 'system'::text CHECK (thememode = ANY (ARRAY['light'::text, 'dark'::text, 'system'::text])),
  languagecode text NOT NULL DEFAULT 'zh'::text CHECK (languagecode = ANY (ARRAY['zh'::text, 'en'::text, 'ja'::text, 'ko'::text])),
  measurementsystem text NOT NULL DEFAULT 'metric'::text CHECK (measurementsystem = ANY (ARRAY['metric'::text, 'imperial'::text])),
  notificationsenabled integer NOT NULL DEFAULT 1,
  soundsenabled integer NOT NULL DEFAULT 1,
  locationsharingenabled integer NOT NULL DEFAULT 0,
  settingsjson jsonb,
  fitnessgoalsjson jsonb,
  privacysettingsjson jsonb,
  workoutdaysjson jsonb,
  preferredworkouttimesjson jsonb,
  preferredfoodsjson jsonb,
  notificationsettingsjson jsonb,
  soundsettingsjson jsonb,
  backupsettingsjson jsonb,
  partnermatchpreferencesjson jsonb,
  blockedusersjson jsonb,
  allowpartnermatching integer NOT NULL DEFAULT 0,
  weeklyactiveminutes integer NOT NULL DEFAULT 0,
  likesreceived integer NOT NULL DEFAULT 0,
  createdat bigint DEFAULT unix_timestamp_ms(),
  lastloginat bigint,
  issynced integer NOT NULL DEFAULT 0,
  lastsynced bigint NOT NULL DEFAULT 0,
  lastmodified bigint NOT NULL DEFAULT unix_timestamp_ms(),
  serverupdatedat bigint NOT NULL DEFAULT unix_timestamp_ms(),
  isanonymous integer NOT NULL DEFAULT 0,
  usertype text NOT NULL DEFAULT 'regular'::text CHECK (usertype = ANY (ARRAY['regular'::text, 'premium'::text, 'admin'::text, 'anonymous'::text])),
  subscriptionplan text NOT NULL DEFAULT 'free'::text CHECK (subscriptionplan = ANY (ARRAY['free'::text, 'basic'::text, 'premium'::text, 'enterprise'::text])),
  subscriptionexpirydate bigint,
  CONSTRAINT users_pkey PRIMARY KEY (user_id)
);